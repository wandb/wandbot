[project]
name = "wandbot"
version = "1.3.3"
description = "WandBot is a Q&A bot for Weights & Biases Models and Weave documentation"
readme = "README.md"
requires-python = ">=3.12,<3.13"
license = {text = "Apache-2.0"}
authors = [
    {name = "parambharat", email = "bharat.ramanathan@wandb.com"},
    {name = "morganmcg1", email = "morganmcg1@users.noreply.github.com"},
    {name = "ayulockin", email = "ayusht@wandb.com"},
    {name = "ash0ts", email = "anish@wandb.com"}
]
dependencies = [
    "numpy>=2.2.2",
    "pandas>=2.1.2",
    "pydantic>=2.10.0",
    "pydantic-settings>=2.5.1",
    "gitpython>=3.1.40",
    "giturlparse>=0.12.0",
    "scikit-learn>=1.3.2",
    "python-dotenv>=1.0.0",
    "slack-bolt>=1.18.0",
    "slack-sdk>=3.21.3",
    "discord>=2.3.2",
    "markdown>=3.5.1",
    "fastapi>=0.115.0",
    "uvicorn>=0.24.0",
    "openai>=1.71.0",
    "anthropic>=0.49.0",
    "google-genai>=1.9.0",
    "cohere>=5.13.0",
    "langchain>=0.2.2",
    "langchain-core>=0.2.2",
    "chromadb==1.0.3",
    "weave>=0.51.54",
    "wandb>=0.20.1",
    "wandb[workspaces]>=0.19.9",
    "tiktoken",
    "fasttext-numpy2-wheel==0.9.2",
    "tree-sitter-languages",
    "markdownify>=0.11.6",
    "colorlog>=6.8.0",
    "google-cloud-bigquery>=3.33.0",
    "python-frontmatter>=1.1.0",
    "nbformat>=5.10.4",
    "nbconvert>=7.16.4",
    "langchain-community>=0.3.24",
    "simple-parsing>=0.1.7",
    "pymdown-extensions>=10.15",
    "tree-sitter==0.21.3",
    "protobuf==4.25.3",
    "modal>=1.0.4",
   
]

[project.optional-dependencies]
bots = [
    # Core bot dependencies
    "slack-bolt>=1.18.0",
    "slack-sdk>=3.21.3",
    "discord>=2.3.2",
    
    # Required for API client
    "aiohttp>=3.8.0",
    "requests>=2.31.0",
    
    # Core dependencies shared with main app
    "pydantic>=2.10.0",
    "pydantic-settings>=2.5.1",
    "python-dotenv>=1.0.0",
    "colorlog>=6.8.0",
    
    # For formatting responses
    "regex>=2023.10.3",
]

[tool.isort]
profile = "black"
line_length = 80
skip = [".gitignore", "data", "examples", "notebooks", "artifacts", ".vscode", ".github", ".idea", ".replit", "*.md", "wandb", ".env", ".git", ]

[tool.black]
line-length = 80
skip = [".gitignore", "data", "examples", "notebooks", "artifacts", ".vscode", ".github", ".idea", ".replit", "*.md", "wandb", ".env", ".git", ]

[tool.pytest.ini_options]
asyncio_mode = "strict"
asyncio_default_fixture_loop_scope = "function"
markers = [
    "integration: marks tests that make real API calls to external services",
]

[tool.ruff]
# Line length setting
line-length = 120

# Enable specific rule categories
select = [
    "E",  # pycodestyle errors
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
]

# Ignore specific rules
ignore = [
    "E501",  # Line too long (handled by formatter)
]

# Exclude directories/files
exclude = [
    ".git",
    ".venv",
    "venv",
    "__pycache__",
    "build",
    "dist",
]

# Additional configurations
unfixable = ["F401"]  # Don't auto-fix unused imports

# Allow unused variables when they start with an underscore
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Specific rule configurations
[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.isort]
known-first-party = ["mypackage"]  # Replace with your package name

# Per-file ignores
[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Ignore unused imports in __init__.py files
"tests/*.py" = ["E501"]   # Ignore line length in test files
